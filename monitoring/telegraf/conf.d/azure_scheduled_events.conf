# Azure Scheduled Events Input Plugin Configuration
# Collects Azure VM scheduled events via the Instance Metadata Service (IMDS)
# Follows Microsoft best practices for IMDS usage and rate limiting

# Azure Scheduled Events Input
[[inputs.http]]
  name_override = "azure_scheduled_events"
  urls = ["http://169.254.169.254/metadata/scheduledevents?api-version=2020-07-01"]
  method = "GET"
  timeout = "10s"
  interval = "30s"
  data_format = "json"
  json_string_fields = ["EventId", "EventType", "ResourceType", "EventStatus", "EventSource", "NotBefore", "Description"]
  
  [inputs.http.headers]
    Metadata = "true"
    User-Agent = "telegraf-azure-events/1.0"

  [inputs.http.tags]
    azure_service = "scheduled_events"
    cloud_provider = "azure"
    metric_source = "imds"
    imds_version = "2020-07-01"
    rate_limit_compliance = "true"

# Azure VM Metadata Input  
[[inputs.http]]
  name_override = "azure_vm_metadata"
  urls = ["http://169.254.169.254/metadata/instance/compute?api-version=2021-12-13"]
  method = "GET"
  timeout = "10s"
  interval = "300s"
  data_format = "json"
  json_string_fields = ["location", "name", "resourceGroupName", "vmSize", "zone", "osType", "publisher", "offer", "sku", "platformFaultDomain", "platformUpdateDomain", "placementGroupId", "vmScaleSetName", "priority"]
  
  [inputs.http.headers]
    Metadata = "true"
    User-Agent = "telegraf-azure-metadata/1.0"

  [inputs.http.tags]
    azure_service = "vm_metadata"
    cloud_provider = "azure"
    metric_source = "imds"

# Custom processor to add event status metrics and handle data privacy
# Follows Microsoft best practices for IMDS data handling
[[processors.starlark]]
  ## Starlark script to process Azure scheduled events
  script = '''def apply(metric):
    if metric.name == "azure_scheduled_events":
        metric.fields["event_count"] = 1
        event_type = metric.tags.get("EventType", "")
        if event_type in ["Reboot", "Redeploy"]:
            metric.tags["severity"] = "high"
        elif event_type in ["Freeze", "Preempt"]:
            metric.tags["severity"] = "critical"
        else:
            metric.tags["severity"] = "medium"
        description = metric.fields.get("Description", "")
        if "Planned" in description:
            metric.tags["maintenance_type"] = "planned"
        else:
            metric.tags["maintenance_type"] = "unplanned"
    elif metric.name == "azure_vm_metadata":
        metric.fields["vm_health_check"] = 1
        if "logical_zone" in metric.fields and metric.fields["logical_zone"]:
            metric.tags["availability_zone"] = str(metric.fields["logical_zone"])
            metric.fields["zone_configured"] = 1
        else:
            metric.fields["zone_configured"] = 0
    return metric'''

# Health check for the Azure IMDS endpoint
# Uses minimal endpoint to check IMDS availability without sensitive data
[[inputs.http_response]]
  name_override = "azure_imds_health"
  
  ## URLs to check (using minimal metadata endpoint)
  urls = [
    "http://169.254.169.254/metadata/instance/compute/location?api-version=2021-12-13&format=text"
  ]

  ## HTTP method
  method = "GET"

  ## Required HTTP headers for IMDS
  [inputs.http_response.headers]
    Metadata = "true"
    User-Agent = "telegraf-imds-health/1.0"

  ## Expected response status code
  expected_response_status_code = 200

  ## HTTP request timeout (Microsoft recommends max 10s)
  timeout = "10s"

  ## Interval for health checks (respects rate limiting)
  interval = "60s"
  
  ## Response time tracking
  response_timeout = "10s"

  ## Additional tags
  [inputs.http_response.tags]
    service = "azure_imds"
    check_type = "health"
    cloud_provider = "azure"
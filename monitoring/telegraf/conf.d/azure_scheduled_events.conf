# Azure Scheduled Events Input Plugin Configuration
# Collects Azure VM scheduled events via the Instance Metadata Service (IMDS)
# Follows Microsoft best practices for IMDS usage and rate limiting

[[inputs.http]]
  name_override = "azure_scheduled_events"
  
  ## URLs to collect metrics from
  ## Using correct API version for scheduled events
  urls = [
    "http://169.254.169.254/metadata/scheduledevents?api-version=2020-07-01"
  ]

  ## HTTP method
  method = "GET"

  ## Required HTTP headers for IMDS
  [inputs.http.headers]
    Metadata = "true"
    User-Agent = "telegraf-azure-events/1.0"

  ## HTTP request timeout (Microsoft recommends max 10s for IMDS)
  timeout = "10s"
  
  ## Rate limiting: Microsoft recommends max 5 requests per second
  ## Collection interval of 30s provides adequate monitoring while respecting limits
  interval = "30s"

  ## Data format to consume
  ## Each data format has its own unique set of configuration options
  data_format = "json_v2"

  ## JSONPath configuration for parsing the response
  [[inputs.http.json_v2]]
    ## Timestamp key for metrics
    # timestamp_path = ""
    
    ## Timestamp format
    # timestamp_format = "2006-01-02T15:04:05Z07:00"

    ## Root object path
    ## If not specified, the entire JSON object is used as the root
    # path = "@"

    ## Field extraction configuration
    [[inputs.http.json_v2.field]]
      path = "DocumentIncarnation"
      rename = "document_incarnation"
      type = "int"

    ## Extract events array
    [[inputs.http.json_v2.object]]
      path = "Events"
      included_keys = ["EventId", "EventType", "ResourceType", "Resources", "EventStatus", "NotBefore", "Description", "EventSource", "DurationInSeconds"]
      
      ## Tags to add to each event
      tags = ["EventId", "EventType", "ResourceType", "EventStatus", "EventSource"]
      
      ## Fields to extract as metrics
      [[inputs.http.json_v2.object.field]]
        path = "DurationInSeconds"
        type = "int"
        optional = true
      
      [[inputs.http.json_v2.object.field]]
        path = "NotBefore"
        type = "string"
        optional = true
      
      [[inputs.http.json_v2.object.field]]
        path = "Description"
        type = "string"
        optional = true
        
      [[inputs.http.json_v2.object.field]]
        path = "Resources"
        type = "string"
        optional = true

  ## Additional tags for all metrics
  ## Note: Following Microsoft guidelines - no sensitive data in tags
  [inputs.http.tags]
    azure_service = "scheduled_events"
    cloud_provider = "azure"
    metric_source = "imds"
    imds_version = "2020-07-01"
    rate_limit_compliance = "true"

# Azure Instance Metadata - VM Information
# Collects non-sensitive VM metadata only
[[inputs.http]]
  name_override = "azure_vm_metadata"
  
  ## URLs to collect VM metadata (latest stable API version)
  urls = [
    "http://169.254.169.254/metadata/instance/compute?api-version=2021-12-13"
  ]

  ## HTTP method
  method = "GET"

  ## Required HTTP headers for IMDS
  [inputs.http.headers]
    Metadata = "true"
    User-Agent = "telegraf-azure-metadata/1.0"

  ## HTTP request timeout (Microsoft recommends max 10s for IMDS)
  timeout = "10s"

  ## Interval to collect metadata (less frequent, respects rate limits)
  ## Microsoft recommends minimal polling for metadata
  interval = "300s"

  ## Data format to consume
  data_format = "json_v2"

  ## JSONPath configuration for VM metadata
  ## Only collect non-sensitive metadata fields per Microsoft guidelines
  [[inputs.http.json_v2]]
    ## Extract essential compute metadata (excluding sensitive fields)
    [[inputs.http.json_v2.object]]
      path = ""
      ## Only include non-sensitive fields as per Microsoft IMDS guidelines
      ## Exclude: customData, userData, publicKeys, securityProfile, resourceId, subscriptionId
      included_keys = ["azEnvironment", "evictionPolicy", "location", "name", "offer", "osType", "platformFaultDomain", "platformUpdateDomain", "priority", "provider", "publisher", "resourceGroupName", "sku", "version", "vmSize", "zone", "placementGroupId", "vmScaleSetName"]
      
      ## Tags for VM metadata (non-sensitive only)
      tags = ["location", "name", "resourceGroupName", "vmSize", "zone", "osType", "publisher", "offer", "sku", "placementGroupId"]
      
      ## Fields to extract (non-sensitive)
      [[inputs.http.json_v2.object.field]]
        path = "platformFaultDomain"
        rename = "physical_fault_domain"
        type = "string"
        optional = true
        
      [[inputs.http.json_v2.object.field]]
        path = "platformUpdateDomain"
        rename = "physical_update_domain"
        type = "string"
        optional = true
        
      [[inputs.http.json_v2.object.field]]
        path = "zone"
        rename = "logical_zone"
        type = "string"
        optional = true
        
      [[inputs.http.json_v2.object.field]]
        path = "placementGroupId"
        rename = "placement_group_id"
        type = "string"
        optional = true
        
      [[inputs.http.json_v2.object.field]]
        path = "vmScaleSetName"
        rename = "scale_set_name"
        type = "string"
        optional = true
        
      [[inputs.http.json_v2.object.field]]
        path = "priority"
        type = "string"
        optional = true

  ## Additional tags for VM metadata
  [inputs.http.tags]
    azure_service = "vm_metadata"
    cloud_provider = "azure"
    metric_source = "imds"

# Custom processor to add event status metrics and handle data privacy
# Follows Microsoft best practices for IMDS data handling
[[processors.starlark]]
  ## Starlark script to process Azure scheduled events
  script = '''def apply(metric):
    if metric.name == "azure_scheduled_events":
        metric.fields["event_count"] = 1
        event_type = metric.tags.get("EventType", "")
        if event_type in ["Reboot", "Redeploy"]:
            metric.tags["severity"] = "high"
        elif event_type in ["Freeze", "Preempt"]:
            metric.tags["severity"] = "critical"
        else:
            metric.tags["severity"] = "medium"
        description = metric.fields.get("Description", "")
        if "Planned" in description:
            metric.tags["maintenance_type"] = "planned"
        else:
            metric.tags["maintenance_type"] = "unplanned"
    elif metric.name == "azure_vm_metadata":
        metric.fields["vm_health_check"] = 1
        if "logical_zone" in metric.fields and metric.fields["logical_zone"]:
            metric.tags["availability_zone"] = str(metric.fields["logical_zone"])
            metric.fields["zone_configured"] = 1
        else:
            metric.fields["zone_configured"] = 0
    return metric'''

# Health check for the Azure IMDS endpoint
# Uses minimal endpoint to check IMDS availability without sensitive data
[[inputs.http_response]]
  name_override = "azure_imds_health"
  
  ## URLs to check (using minimal metadata endpoint)
  urls = [
    "http://169.254.169.254/metadata/instance/compute/location?api-version=2021-12-13&format=text"
  ]

  ## HTTP method
  method = "GET"

  ## Required HTTP headers for IMDS
  [inputs.http_response.headers]
    Metadata = "true"
    User-Agent = "telegraf-imds-health/1.0"

  ## Expected response status code
  expected_response_status_code = 200

  ## HTTP request timeout (Microsoft recommends max 10s)
  timeout = "10s"

  ## Interval for health checks (respects rate limiting)
  interval = "60s"
  
  ## Response time tracking
  response_timeout = 10.0

  ## Additional tags
  [inputs.http_response.tags]
    service = "azure_imds"
    check_type = "health"
    cloud_provider = "azure"
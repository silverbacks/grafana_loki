# Prometheus Output Plugin Configuration
# Send metrics to Grafana Labs Prometheus datastore using remote write

[[outputs.prometheus_client]]
  ## Address to listen on for Prometheus scrapes
  listen = ":9273"
  
  ## Metric version controls the mapping from telegraf metrics into
  ## prometheus format.  When using the prometheus input, use the same value in
  ## both plugins to ensure metrics are round-tripped without modification.
  ##
  ##   example: metric_version = 1; 
  ##            metric_version = 2; recommended version
  metric_version = 2

  ## Use only the measurement name as the prometheus metric name, don't include
  ## field names. Useful when you have one field per measurement.
  # basic_username = ""
  # basic_password = ""

  ## Optional TLS Config
  # tls_cert = "/etc/ssl/telegraf.crt"
  # tls_key = "/etc/ssl/telegraf.key"

  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## Path to publish the metrics on.
  path = "/metrics"

  ## Expiration interval for each metric. 0 == no expiration
  expiration_interval = "60s"

  ## Collectors to enable, valid entries are "gocollector" and "process".
  ## If unset, both are enabled.
  collectors_exclude = ["gocollector", "process"]

  ## Send string metrics as Prometheus labels.
  ## Unless set to false all string metrics will be sent as labels.
  string_as_label = true

  ## If set, enable TLS with the given certificate.
  # tls_cert = "/etc/ssl/telegraf.crt"
  # tls_key = "/etc/ssl/telegraf.key"

  ## Set one or more allowed client CA certificate file names to
  ## enable mutually authenticated TLS connections
  # tls_allowed_cacerts = ["/etc/telegraf/clientca.pem"]

  ## Export metric collection time.
  export_timestamp = true

# Alternative: Direct remote write to Grafana Cloud Prometheus
[[outputs.http]]
  ## URL is the address to send metrics to
  url = "$PROMETHEUS_REMOTE_WRITE_URL"

  ## Timeout for HTTP messages.
  timeout = "5s"

  ## HTTP method, one of: "POST" or "PUT"
  method = "POST"

  ## HTTP Basic Auth credentials
  username = "$PROMETHEUS_USERNAME"
  password = "$PROMETHEUS_PASSWORD"

  ## Optional HTTP headers
  [outputs.http.headers]
    Content-Type = "application/x-protobuf"
    Content-Encoding = "snappy"
    X-Prometheus-Remote-Write-Version = "0.1.0"

  ## Data format to output.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
  data_format = "prometheusremotewrite"

# InfluxDB Line Protocol output (backup/debugging)
# [[outputs.file]]
#   ## Files to write to, "stdout" is a specially handled file.
#   files = ["stdout", "/tmp/telegraf-azure-events.out"]
#   
#   ## Data format to output.
#   data_format = "influx"

# Optional: Send to local Prometheus instance for testing
# [[outputs.prometheus_client]]
#   ## Address to listen on for Prometheus scrapes  
#   listen = ":9274"
#   metric_version = 2
#   path = "/metrics"
#   expiration_interval = "60s"
#   string_as_label = true
#   export_timestamp = true